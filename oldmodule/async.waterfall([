async.waterfall([
    function (callback) {
    for (var i in stores) {
         console.log("count of i start and it is" + i);
         var storeData = stores[i];
         var transactions = storeData.incomesourceDetail;
         var totalAmounttoTransfer = 0;
         var isAllStoreDone = true;
         var dataOfTrans = [];
         console.log('transactions');
         console.log(transactions.length);
       
             for(j in  transactions)
           {  
            console.log("count of j start and it is" + j);

            //var tranData=transactions[j];
            console.log(tranData.balancetransId);
            var donetran = false;
            stripe.balance.retrieveTransaction(
               tranData.balancetransId,
               function(err, balanceTransaction) {
                  console.log('balanceTransaction');
                  // console.log(balanceTransaction);
                  if (err) {
                     console.log("err while retrieving" + err);

                  } else if (!balanceTransaction) {
                     console.log("no transc retrieve err while retrieving");
                  }
                  else
                  {
                    console.log("do nothing");
                  }

                  if (balanceTransaction.status == "available") {
                     //console.log(totalAmounttoTransfer);
                     console.log(tranData.afterDeducAmount);
                     console.log('tranData.afterDeducAmount');
                     totalAmounttoTransfer = totalAmounttoTransfer + parseInt(tranData.afterDeducAmount);
                     console.log(totalAmounttoTransfer);
                     console.log("totalAmounttoTransfer>>>>>>>>>>>>>>");
                     console.log(j);
                     //console.log (stores[i].incomesourceDetail[j].balancetransId);

                     stores[i].incomesourceDetail.splice(j, 1);
                     stores[i].markModified("incomesourceDetail");
                     var dataSave = false;

                     stores[i].save((err, storeSaved) => {
                        if (err) {
                           tranData.notes = "failed";
                           tranData.errDetail = err.message;
                        } else {
                           tranData.notes = "Success";
                        }

                        console.log(tranData);
                        console.log("after  splicing");
                        dataOfTrans.push(tranData);
                        dataSave = true;
                        donetran = true;

                     });
                     
                     
                  } else {
                     donetran = true;
                  } // asynchronously called

               }
           
            console.log("count of j ends and it is" + j);
         })

         }
        callback(null, dataOfTrans);
    },
    function (dataOfTrans,totalAmounttoTransfer, callback) {
           console.log(totalAmounttoTransfer);
         console.table(dataOfTrans);
         var actualtransData = [];
         for (var k in dataOfTrans) {
            var perTransactioStatus = dataOfTrans[k];
            if (perTransactioStatus.notes == "Success") {
               console.log(perTransactioStatus.balancetransId + "is eligible for transfer");
               actualtransData.push(perTransactioStatus);
               console.log(totalAmounttoTransfer);
               console.log("totalAmounttoTransfer>>>>>>>>>>>>>>");
            } else {
               totalAmounttoTransfer = totalAmounttoTransfer - parseInt(perTransactioStatus.afterDeducAmount);
               stores[i].incomesourceDetail.push(perTransactioStatus);
               console.log(totalAmounttoTransfer);
               console.log("totalAmounttoTransfer>>>>>>>>>>>>>>");
            }
         }

         console.log(totalAmounttoTransfer + "actual one");
         console.log(actualtransData.length);
         console.log('actualtransData.length');
        callback(null, '3');
    },
    function (arg1, callback) {
        console.log('Third Step --> ' + arg1);
        callback(null, 'final result');
    }
], function (err, result) {
    console.log('Main Callback --> ' + result);
});